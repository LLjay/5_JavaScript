/**
 * Hoisting
 */

console.log(name1);
var name1 = "jisoo";
console.log(name1);
// 링커? 오류가 될 수 있는 부분을 알려주는 기능, 회사마다 다르게 설정해서 씀

// undefined 가 뜨면 안 되고 오류가 떠야 하는 부분?
// 변수 선언도 안 해줬는데 undefined가 떴다는 건 이미 변수가 있다는 것
// => 이미 한 번 코드를 읽었다는 것

/**
 * Hoisting
 * 
 * 모든 변수 선언문이 코드의 최상단으로 이동 되는 것처럼 느껴지는 현상
 * 
 * // 자바 스크립트는 파일을 한 번 쭉 읽어서 변수 정보를 최상단에 올려놓음
 * // 그 변수 정보를 가지고 다시 해당 코드들을 한줄한줄 읽어내려가면서 그 시점에 해당하는 변수나 함수를 찾아 실행하는 것
 * 
 * // var는 덮어쓸 수 있으므로 코드가 복잡해짐
 * // 함수 안에 있는 변수는 호이스팅 하지 않음
 * 
 * // var는 초기부터 사용된 변수고 호이스팅은 자바 스크립트의 작동 원리, 함부로 바꾸기가 힘듦
 * 
 * let, const
 */

// const g = function(){
//     var k = 0;
// }
// // 함수 안의 변수는 호이스팅 하지 않음

// console.log(k);

console.log(name2);
let name2 = "jisoo";
// -> 오류남

// TDZ(일시적 사각지대)
// 호이스팅 존에는 let, const, var 다 됨
// let과 const는 호이스팅 시 TDZ에도 다같이 넣어버림
// 호이스팅 존에서 실행 시 TDZ를 확인해서 정보가 있으면 아직 선언되지 않은 변수라고 판단해 오류를 뱉음
// 변수 초기화한 순간 TDZ에서 해당 변수를 삭제함 => let과 const는 var처럼 초기화 되지 않은 변수를 허용하지 않게 만듦